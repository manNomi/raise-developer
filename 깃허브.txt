3깃 과 깃허브 

** Git 

- 정의: 분산 버전 관리 시스템
-Git 은 로컬시스템이다 


** Github

#git bash

-정의: git 의 기능을 하는 온라인 커뮤니티 / 클라우드 

1. 협업용 툴로 사용 (심화 과정)
2. 개발자의 포트폴리오 


** 깃의 용어

 Repository  (Repo라고부름)

ㄴ 프로젝트 폴더를 의미
ㄴ 현재 진행 중인 프로젝트의 폴더에 ,git 을 설치하면 repo로 인식이 된다 

add(명령어)

ㄴ Stage에 코드 파일을 추가하는 명령어 
- stage 는 개념 
ㄴ 임시저장 공간 (버전으로 만들기 전)
삭제된것이나 수정된것 어디가 바뀐지를 저장 
코드자체를 모두 저장 하는게 아닌. 직전 버전과의 차이점만 저장하기 위해 저장하는 공간 
1.용량 문제 해결
2. 직전 버전 과의 차이점을 눈으로 보여주기 위해 

commit (명령어)

-Stage 의 내용을 버전으로 저장하는 명령어 

**깃허브 용어 

Clone(명령어)

ㄴ원격 Repo에서내 로컬로 다운로드 받아서 로컬 Repo로 만드는 것 
(Github의 내용을 다운받아서 내 컴퓨터에 설치하는 것)

Push ( 명령어 )
ㄴ 로컬 Repo의 버전을 원격 Repo로 업로드 

Pull(명령어)
ㄴ 원격 Repo의 버전을 로컬 Repo로 다운로드 

#clone과 pull의 차이 
전체다 새로 만드는것은 clone 새로운 버전으로 바꾸는건 pull

Fork (명령어)
ㄴ 원격 Repo에서 다른 원격 지점(깃허브)으로 다운로드 받아서 Repo로 만드는 것 (원격=다른 깃허브)
# 포크는 찍어서 어디에 둘지 보는것
#남의 코드가 좋아보여서 포크하면 내깃허브로 받기 

Branch(개념) 가지 

하나의 프로젝트를 가지처럼 쪼개놓는것 
EX) sqlite 마리아db 둘중 어느것을 쓸지 가지처럼 쪼개서 하는것 
여러 방향성을 가진 프로젝트를 만들 수 있다 


#-----------------------------------------------------------------------------------------------------------#
commit 은 기능 하나를 만들거나 수정했을때 마다 commit을 해야한다 
깃허브에서 수정시 풀 안해주면 로컬과 충돌이 나게 된다 
#-----------------------------------------------------------------------------------------------------------#
rm -rf .git/ -> 현재 리포 삭제

git init-> 그 폴더가 Repo 가된다 
그 폴더에 .git 이라는 숨김 풀더가 생김 

git add ./*  -> 현재 폴더의 모든것을 add 하겠다 

git config user.name "manNomi"  -> 내가 누군지를 밝히는 것 
git config user.email "hanmw110@naver.com" -> 마찬가지 이메일

git config --list  -> config 확인 

프로젝트당 처음에만 해주면 된다 

git commit -m "First Commit"  -> 메모형식으로 적겠다 저장 나중에 확인용으로 중요하므로 세세하게 적자

git remote add origin (링크)- 괄호 제외	
(한번만 해주면 됨 깃허브와 연결 하는것 ) origin ->원격접속 경로 
->링크의 경우 깃허브 페이지에서 리포 만들고 거기서 복사해서 하면된다

git remote -v ->remote가 정상적인지 확인

git remote remove origin -> origin 삭제

git push -f origin master  - force push 

git clone 주소   ->  origin 포함해서 가져옴 

git push origin master 
master -> branch 이름

cd 파일 
git add 
git commit 
git push origin 
순서로 해준다

git pull origin develop

git branch -a

$ git clone -b <branch명> <remote_repo 주소>

# git clone -b <branch명> <remote_repo 주소>
->특정 브랜치를 클론하는법 

$ git clone -b develop https://github.com/project/test.git
출처: https://info-lab.tistory.com/60 [:: IT School :::티스토리]

git branch  - 브랜치 확인 

git branch manwook - 브랜치 생성 

git checkin manwook - 브랜치 변경 
#-----------------------------------------------------------------------------------------------------------#


git remote add origin (https://github.com/manNomi/manNomi.git)

git remote add origin (https://github.com/manNomi/db.git)

git remote add origin https://github.com/manNomi/coffeKiosck

#-----------------------------------------------------------------------------------------------------------#

** PM의 사전 준비

1. PM이 프로젝트 폴더를 만든다.
2. 해당 프로젝트 폴더를 리포지토리로 만든다
3. Develop Branch를 만든다.
4. Develop Branch에 기본적으로 필요한 개발 프로젝트를 구성한다.
5. Git Hub에 Push한다.

** 팀원의 사전 준비

1. Git Hub의 리포지토리를 Clone 한다.
2. 다운로드된 Git 리포지토리에는 Master와 Develop Branch가 존재할 것
3. 개인 Branch를 만든다.

** 협업 과정

1. 모든 작업은 생성한 개인 Branch에서 작업을 한다.
2. 개인 Brach에 작업한 내용은 본디 Git Hub를 사용하는 목적에 따라, 내 개인 Git Hub에 Push 한다.
ㄴ 협업용 Git Hub에도 개인 Branch를 만들어서 이 공간을 버전 보관용으로 사용해도 무방하다.
3. Develop Branch로 checkout하여 내 개인 Branch를 Merge한다.
4. Develop Branch에서 Git Hub의 Develop Branch를 Pull 한다.
ㄴ 이 때, Conflict이 난다면 해결해야 한다.
ㄴ Conflict이 나서 해결을 했다면, 까먹지 말고 내 개인 Branch에서 Pull을 당겨오는 것을 잊지 말자
5. Develop Branch를 Git Hub의 Develop Branch로 push한다.
ㄴ 위 Pull 과정에서 Conflict을 해결했기 때문에, 더이상 Conflict은 발생하지 않는다.
ㄴ 만약에, 내가 Conflict을 해결하는 동안 다른 개발자가 또 다른 버전을 Push 했다면 또 다시 Conflict이 날 수 있긴 하다.

** 주의 사항

- 협업 시에는 언제나 Conflict가 날 수 있음
ㄴ Conflict가 나는 상황은, 한 개의 파일을 여러 개발자가 작업할 때 발생
ㄴ 이 경우, 한 파일에 대한 2개의 버전에 대하여 이 두 개의 버전을 일일히 보며 합쳐주는 과정이 필요함
ㄴ 역할 분배를 잘 하여, 한 파일에서 작업해야하는 내용을 없앤다면 Conflict는 발생하지 않음
ㄴ 따라서 어쩔 수 없이 겹쳐야하는 파일들은 gitignore에 등록하여, Git Hub에 올라가지 않도록 하는 것도 방법
예시) Server.js, package.json 등
예시) Manifest, Gradle 등

#-----------------------------------------------------------------------------------------------------------#

깃 리모트 두개 이상 설정이 가능

#-----------------------------------------------------------------------------------------------------------#

깃허브 리모트 두개 관리시 브랜치 잘 쓸것 

master에 올리려는데 master 브랜치가 없음 안됨 

리포지터리 인잇을 해두자 - 잘안되면 

git push manwook master < - 개인 git 용   
